package net.runelite.client.plugins.devtools;import net.runelite.api.Actor;import net.runelite.api.Client;import net.runelite.api.NPC;import net.runelite.api.Player;import net.runelite.api.coords.WorldPoint;import net.runelite.api.events.AnimationFrameIndexChanged;import net.runelite.api.events.GraphicChanged;import net.runelite.client.eventbus.EventBus;import net.runelite.client.eventbus.Subscribe;import net.runelite.client.ui.ColorScheme;import net.runelite.client.ui.DynamicGridLayout;import net.runelite.client.ui.FontManager;import org.jetbrains.annotations.NotNull;import javax.inject.Inject;import javax.swing.*;import javax.swing.border.CompoundBorder;import java.awt.*;import java.awt.event.AdjustmentEvent;import java.awt.event.AdjustmentListener;/** * @author Kris | 22/10/2021 */@SuppressWarnings("DuplicatedCode")public class EventInspector extends DevToolsFrame {    private final static int MAX_LOG_ENTRIES = 10_000;    private final Client client;    private final EventBus eventBus;    private final JPanel tracker = new JPanel();    private int lastTick = 0;    @Inject    EventInspector(Client client, EventBus eventBus) {        this.client = client;        this.eventBus = eventBus;        setTitle("Event Inspector");        setLayout(new BorderLayout());        tracker.setLayout(new DynamicGridLayout(0, 1, 0, 3));        final JPanel trackerWrapper = new JPanel();        trackerWrapper.setLayout(new BorderLayout());        trackerWrapper.add(tracker, BorderLayout.NORTH);        final JScrollPane trackerScroller = new JScrollPane(trackerWrapper);        trackerScroller.setPreferredSize(new Dimension(1200, 400));        final JScrollBar vertical = trackerScroller.getVerticalScrollBar();        vertical.addAdjustmentListener(new AdjustmentListener() {            int lastMaximum = actualMax();            private int actualMax()            {                return vertical.getMaximum() - vertical.getModel().getExtent();            }            @Override            public void adjustmentValueChanged(AdjustmentEvent e) {                if (vertical.getValue() >= lastMaximum) {                    vertical.setValue(actualMax());                }                lastMaximum = actualMax();            }        });        add(trackerScroller, BorderLayout.CENTER);        final JPanel trackerOpts = new JPanel();        trackerOpts.setLayout(new FlowLayout());        final JButton clearBtn = new JButton("Clear");        clearBtn.addActionListener(e -> {            tracker.removeAll();            tracker.revalidate();        });        trackerOpts.add(clearBtn);        add(trackerOpts, BorderLayout.SOUTH);        pack();    }    private void addLine(String prefix, String text) {        int tick = client.getTickCount();        SwingUtilities.invokeLater(() -> {            if (tick != lastTick) {                lastTick = tick;                JLabel header = new JLabel("Tick " + tick);                header.setFont(FontManager.getRunescapeSmallFont());                header.setBorder(new CompoundBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, ColorScheme.LIGHT_GRAY_COLOR), BorderFactory.createEmptyBorder(3, 6, 0, 0)));                tracker.add(header);            }            JPanel labelPanel = new JPanel();            labelPanel.setLayout(new BorderLayout());            JLabel prefixLabel = new JLabel(prefix);            JLabel textLabel = new JLabel(text);            prefixLabel.setPreferredSize(new Dimension(350, 14));            prefixLabel.setMaximumSize(new Dimension(350, 14));            labelPanel.add(prefixLabel, BorderLayout.WEST);            labelPanel.add(textLabel);            tracker.add(labelPanel);            // Cull very old stuff            while (tracker.getComponentCount() > MAX_LOG_ENTRIES) {                tracker.remove(0);            }            tracker.revalidate();        });    }    @Subscribe    public void spotanimChanged(GraphicChanged event) {        Actor actor = event.getActor();        if (actor == null) return;        String actorLabel = formatActor(actor);        StringBuilder graphicsLabelBuilder = new StringBuilder();        graphicsLabelBuilder.append("Graphics(");        graphicsLabelBuilder.append("id = ").append(actor.getGraphic() == 65535 ? -1 : actor.getGraphic());        final int delay = actor.getGraphicStartCycle() - client.getGameCycle();        if (delay != 0) graphicsLabelBuilder.append(", delay = ").append(delay);        if (actor.getGraphicHeight() != 0) graphicsLabelBuilder.append(", height = ").append(actor.getGraphicHeight());        graphicsLabelBuilder.append(")");        addLine(actorLabel, graphicsLabelBuilder.toString());    }    @Subscribe    public void sequenceChanged(AnimationFrameIndexChanged event) {        Actor actor = event.getActor();        if (actor == null || actor.getAnimationFrameIndex() != 0 || actor.getName() == null || !isActorPositionInitialized(actor)) return;        String actorLabel = formatActor(actor);        StringBuilder animationLabelBuilder = new StringBuilder();        animationLabelBuilder.append("Animation(");        animationLabelBuilder.append("id = ").append(actor.getAnimation() == 65535 ? -1 : actor.getAnimation());        if (actor.getAnimationDelay() != 0) animationLabelBuilder.append(", delay = ").append(actor.getAnimationDelay());        animationLabelBuilder.append(")");        addLine(actorLabel, animationLabelBuilder.toString());    }    /**     * It is possible for some variables to be uninitialized on login, so as an uber cheap fix, let's try-catch validate if the actor is fully initialized.     */    private boolean isActorPositionInitialized(Actor actor) {        try {            return actor.getWorldLocation() != null;        } catch (NullPointerException ignored) {            return false;        }    }    private String formatActor(@NotNull Actor actor) {        WorldPoint actorWorldLocation = actor.getWorldLocation();        String coordinateString = "x: " + actorWorldLocation.getX() + ", y: " + actorWorldLocation.getY();        if (actor instanceof Player) {            return ("Player(" + (actor.getName() + ", idx: " + ((Player) actor).getPlayerId() + ", " + coordinateString + ")"));        } else if (actor instanceof NPC) {            return ("Npc(" + (actor.getName() + ", idx: " + ((NPC) actor).getIndex() + ", id: " + ((NPC) actor).getId() +", " + coordinateString + ")"));        }        return ("Unknown(" + coordinateString + ")");    }    @Override    public void open() {        eventBus.register(this);        super.open();    }    @Override    public void close() {        super.close();        tracker.removeAll();        eventBus.unregister(this);    }}