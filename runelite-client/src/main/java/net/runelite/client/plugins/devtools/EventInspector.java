package net.runelite.client.plugins.devtools;import net.runelite.api.Client;import net.runelite.client.eventbus.EventBus;import net.runelite.client.ui.DynamicGridLayout;import javax.inject.Inject;import javax.swing.*;import java.awt.*;import java.awt.event.AdjustmentEvent;import java.awt.event.AdjustmentListener;/** * @author Kris | 22/10/2021 */public class EventInspector extends DevToolsFrame {    private final static int MAX_LOG_ENTRIES = 10_000;    private final Client client;    private final EventBus eventBus;    private final JPanel tracker = new JPanel();    private int lastTick = 0;    @Inject    EventInspector(Client client, EventBus eventBus) {        this.client = client;        this.eventBus = eventBus;        setTitle("Event Inspector");        setLayout(new BorderLayout());        tracker.setLayout(new DynamicGridLayout(0, 1, 0, 3));        final JPanel trackerWrapper = new JPanel();        trackerWrapper.setLayout(new BorderLayout());        trackerWrapper.add(tracker, BorderLayout.NORTH);        final JScrollPane trackerScroller = new JScrollPane(trackerWrapper);        trackerScroller.setPreferredSize(new Dimension(1200, 400));        final JScrollBar vertical = trackerScroller.getVerticalScrollBar();        vertical.addAdjustmentListener(new AdjustmentListener() {            int lastMaximum = actualMax();            private int actualMax()            {                return vertical.getMaximum() - vertical.getModel().getExtent();            }            @Override            public void adjustmentValueChanged(AdjustmentEvent e) {                if (vertical.getValue() >= lastMaximum) {                    vertical.setValue(actualMax());                }                lastMaximum = actualMax();            }        });        add(trackerScroller, BorderLayout.CENTER);        final JPanel trackerOpts = new JPanel();        trackerOpts.setLayout(new FlowLayout());        final JButton clearBtn = new JButton("Clear");        clearBtn.addActionListener(e -> {            tracker.removeAll();            tracker.revalidate();        });        trackerOpts.add(clearBtn);        add(trackerOpts, BorderLayout.SOUTH);        pack();    }    @Override    public void open() {        eventBus.register(this);        super.open();    }    @Override    public void close() {        super.close();        tracker.removeAll();        eventBus.unregister(this);    }}