package net.runelite.client.plugins.devtools;import com.google.common.collect.HashMultimap;import com.google.common.collect.ImmutableSet;import com.google.common.collect.Multimap;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import net.runelite.api.*;import net.runelite.api.coords.LocalPoint;import net.runelite.api.coords.WorldPoint;import net.runelite.api.events.*;import net.runelite.client.callback.ClientThread;import net.runelite.client.eventbus.EventBus;import net.runelite.client.eventbus.Subscribe;import net.runelite.client.ui.ColorScheme;import net.runelite.client.ui.DynamicGridLayout;import net.runelite.client.ui.FontManager;import org.apache.commons.lang3.tuple.Pair;import org.jetbrains.annotations.NotNull;import javax.inject.Inject;import javax.swing.*;import javax.swing.border.CompoundBorder;import java.awt.*;import java.awt.event.AdjustmentEvent;import java.awt.event.AdjustmentListener;import java.util.*;import java.util.List;/** * @author Kris | 22/10/2021 */@SuppressWarnings("DuplicatedCode")@Slf4jpublic class EventInspector extends DevToolsFrame {    private final static int MAX_LOG_ENTRIES = 10_000;    private static final int VARBITS_ARCHIVE_ID = 14;    private final Client client;    private final EventBus eventBus;    private final ProjectileTracker projectileTracker;    private final JPanel tracker = new JPanel();    private int lastTick = 0;    private final Map<Skill, Integer> cachedExperienceMap = new HashMap<>();    private final List<OverheadTextChanged> overheadChatList = new ArrayList<>();    private final ClientThread clientThread;    private int[] oldVarps = null;    private int[] oldVarps2 = null;    private boolean accessedObjectForAnimation = false;    private Multimap<Integer, Integer> varbits;    private final Set<Actor> facedActors = new HashSet<>();    private final Map<Actor, Integer> facedDirectionActors = new HashMap<>();    private final Map<Player, Integer> playerTransformations = new HashMap<>();    private final Map<Long, Set<Integer>> updatedIfEvents = new HashMap<>();    private final List<PendingSpawnUpdated> pendingSpawnList = new ArrayList<>();    private final Map<WidgetNode, Pair<Long, Long>> ifMoveSubs = new HashMap<>();    private WidgetNode lastMoveSub;    private long hashTableNodeGet1 = -1;    private long hashTableNodeGet2 = -1;    private int latestInventoryId = -1;    private int widgetScrollY = -1;    private String widgetText = null;    private int widgetSequence = -1;    private int widgetColor = -1;    private int widgetZoom = -1;    private int widgetAngleX = -1;    private int widgetAngleY = -1;    private int widgetPositionX = -1;    private int widgetPositionY = -1;    private int widgetModelId = -1;    private int widgetItemId = -1;    private int widgetItemQuantityOrModelId = -1;    private boolean widgetObjectType;    private boolean widgetSetPlayerHead = false;    private int widgetModelRotation = -1;    private Boolean widgetHidden = null;    private int widgetNpcId = -1;    /* A set for ignored scripts. There are some plugins which invoke procs through the client which we ignore. */    private final Set<Integer> ignoredClientScripts = ImmutableSet.<Integer>builder().add(4029).build();    private final JCheckBox projectiles = new JCheckBox("Projectiles", true);    private final JCheckBox spotanims = new JCheckBox("Spotanims", true);    private final JCheckBox sequences = new JCheckBox("Sequences", true);    private final JCheckBox soundEffects = new JCheckBox("Sound Effects", true);    private final JCheckBox areaSoundEffects = new JCheckBox("Area Sound Effects", true);    private final JCheckBox say = new JCheckBox("Say", true);    private final JCheckBox experience = new JCheckBox("Experience", true);    private final JCheckBox messages = new JCheckBox("Messages", true);    private final JCheckBox varbitsCheckBox = new JCheckBox("Varbits", true);    private final JCheckBox varpsCheckBox = new JCheckBox("Varps", true);    private final JCheckBox hitsCheckBox = new JCheckBox("Hits", true);    private final JCheckBox interacting = new JCheckBox("Entity Facing", true);    private final JCheckBox tileFacing = new JCheckBox("Tile Facing", true);    private final JCheckBox clientScripts = new JCheckBox("Clientscripts", true);    private final JCheckBox exactMove = new JCheckBox("Exact Move", true);    private final JCheckBox combinedObjects = new JCheckBox("Combined Objects", true);    private final JCheckBox transformations = new JCheckBox("Transformations", true);    private final JCheckBox ifEvents = new JCheckBox("Interface Events", true);    private final JCheckBox inventoryChanges = new JCheckBox("Inventories", true);    private final JCheckBox graphicsObjectChanges = new JCheckBox("Spotanim Specific", true);    private final JCheckBox jingles = new JCheckBox("Jingles", true);    private final JCheckBox hintArrows = new JCheckBox("Hint Arrows", true);    private final JCheckBox camera = new JCheckBox("Camera", true);    private final JCheckBox minimapState = new JCheckBox("Minimap State", true);    private final JCheckBox mapObjectAdd = new JCheckBox("Map Object Add", true);    private final JCheckBox mapObjectDel = new JCheckBox("Map Object Del", true);    private final JCheckBox mapObjectAnim = new JCheckBox("Map Object Anim", true);    private final JCheckBox groundItemAdd = new JCheckBox("Ground Item Add", true);    private final JCheckBox groundItemDel = new JCheckBox("Ground Item Del", true);    private final JCheckBox groundItemUpdate = new JCheckBox("Ground Item Update", true);    private final JCheckBox ifOpenTop = new JCheckBox("Top Interfaces", true);    private final JCheckBox ifOpenSub = new JCheckBox("Sub Interfaces", true);    private final JCheckBox ifCloseSub = new JCheckBox("Close Sub Interfaces", true);    private final JCheckBox ifMoveSub = new JCheckBox("Move Sub Interfaces", true);    private final JCheckBox miscInterfacePackets = new JCheckBox("Misc. Interface Packets", true);    @Inject    EventInspector(Client client, EventBus eventBus, ClientThread clientThread, ProjectileTracker projectileTracker) {        this.client = client;        this.eventBus = eventBus;        this.clientThread = clientThread;        this.projectileTracker = projectileTracker;        setTitle("Event Inspector");        setLayout(new BorderLayout());        tracker.setLayout(new DynamicGridLayout(0, 1, 0, 3));        final JPanel trackerWrapper = new JPanel();        trackerWrapper.setLayout(new BorderLayout());        trackerWrapper.add(tracker, BorderLayout.NORTH);        final JScrollPane trackerScroller = new JScrollPane(trackerWrapper);        trackerScroller.setPreferredSize(new Dimension(1400, 300));        final JScrollBar vertical = trackerScroller.getVerticalScrollBar();        vertical.addAdjustmentListener(new AdjustmentListener() {            int lastMaximum = actualMax();            private int actualMax() {                return vertical.getMaximum() - vertical.getModel().getExtent();            }            @Override            public void adjustmentValueChanged(AdjustmentEvent e) {                if (vertical.getValue() >= lastMaximum) {                    vertical.setValue(actualMax());                }                lastMaximum = actualMax();            }        });        add(trackerScroller, BorderLayout.CENTER);        final JPanel trackerOpts = new JPanel();        trackerOpts.setBorder(BorderFactory.createMatteBorder(0, 1, 0, 0, Color.BLACK));        trackerOpts.setLayout(new BoxLayout(trackerOpts, BoxLayout.Y_AXIS));        trackerOpts.add(getZonePacketsPanel());        trackerOpts.add(new JSeparator());        trackerOpts.add(getMasksPanel());        trackerOpts.add(new JSeparator());        trackerOpts.add(getInterfacesPanel());        trackerOpts.add(new JSeparator());        trackerOpts.add(getMiscPanel());        trackerOpts.add(new JSeparator());        final JButton enabledAllButton = new JButton("Enable all");        enabledAllButton.addActionListener(e -> {            changeJCheckBoxStatus(trackerOpts, true);            tracker.revalidate();        });        trackerOpts.add(enabledAllButton);        final JButton disableAllButton = new JButton("Disable all");        disableAllButton.addActionListener(e -> {            changeJCheckBoxStatus(trackerOpts, false);            tracker.revalidate();        });        trackerOpts.add(disableAllButton);        final JButton clearBtn = new JButton("Clear");        clearBtn.addActionListener(e -> {            tracker.removeAll();            tracker.revalidate();        });        trackerOpts.add(clearBtn);        add(trackerOpts, BorderLayout.EAST);        pack();    }    private void changeJCheckBoxStatus(JPanel parent, boolean value) {        for (Component component : parent.getComponents()) {            if (component instanceof JCheckBox) {                ((JCheckBox) component).setSelected(value);            } else if (component instanceof JPanel) {                changeJCheckBoxStatus((JPanel) component, value);            }        }    }    private JPanel getZonePacketsPanel() {        final JPanel zonePacketsPanel = new JPanel();        zonePacketsPanel.setLayout(new BoxLayout(zonePacketsPanel, BoxLayout.Y_AXIS));        zonePacketsPanel.add(projectiles);        zonePacketsPanel.add(areaSoundEffects);        zonePacketsPanel.add(combinedObjects);        zonePacketsPanel.add(graphicsObjectChanges);        zonePacketsPanel.add(mapObjectAdd);        zonePacketsPanel.add(mapObjectDel);        zonePacketsPanel.add(mapObjectAnim);        zonePacketsPanel.add(groundItemAdd);        zonePacketsPanel.add(groundItemDel);        zonePacketsPanel.add(groundItemUpdate);        projectiles.setToolTipText("<html>The projectile inspector will require each unique projectile to be received from two" +                "<br>different distances in order for it to be able to identify all of the projectile parameters." +                "<br>This is due to one of the properties of projectile being the equivalent of" +                "<br>lengthAdjustment + (chebyshevDistance * stepMultiplier).</html>");        combinedObjects.setToolTipText("<html>Combined Objects refer to objects which have their models merged with the players' model" +                " to fix model priority issues.<br>This is commonly used for agility shortcuts and obstacles, such as pipes.</html>");        return zonePacketsPanel;    }    private JPanel getMasksPanel() {        final JPanel masksPanel = new JPanel();        masksPanel.setLayout(new BoxLayout(masksPanel, BoxLayout.Y_AXIS));        masksPanel.add(spotanims);        masksPanel.add(sequences);        masksPanel.add(say);        masksPanel.add(hitsCheckBox);        masksPanel.add(interacting);        masksPanel.add(tileFacing);        masksPanel.add(exactMove);        masksPanel.add(transformations);        return masksPanel;    }    private JPanel getInterfacesPanel() {        final JPanel interfacesPanel = new JPanel();        interfacesPanel.setLayout(new BoxLayout(interfacesPanel, BoxLayout.Y_AXIS));        interfacesPanel.add(messages);        interfacesPanel.add(clientScripts);        interfacesPanel.add(ifEvents);        interfacesPanel.add(ifOpenTop);        interfacesPanel.add(ifOpenSub);        interfacesPanel.add(ifCloseSub);        interfacesPanel.add(ifMoveSub);        interfacesPanel.add(miscInterfacePackets);        miscInterfacePackets.setToolTipText("<html>Miscellaneous interface packets refer to the following packets:<br>" +                "IfSetHide<br>" +                "IfSetPosition<br>" +                "IfSetScrollPos<br>" +                "IfSetText<br>" +                "IfSetAngle<br>" +                "IfSetAnim<br>" +                "IfSetColor<br>" +                "IfSetModel<br>" +                "IfSetObject<br>" +                "IfModelRotate<br>" +                "IfSetPlayerHead<br>" +                "IfSetNpcHead</html>");        return interfacesPanel;    }    private JPanel getMiscPanel() {        final JPanel miscPanel = new JPanel();        miscPanel.setLayout(new BoxLayout(miscPanel, BoxLayout.Y_AXIS));        miscPanel.add(inventoryChanges);        miscPanel.add(soundEffects);        miscPanel.add(jingles);        miscPanel.add(experience);        miscPanel.add(varpsCheckBox);        miscPanel.add(varbitsCheckBox);        miscPanel.add(hintArrows);        miscPanel.add(camera);        miscPanel.add(minimapState);        return miscPanel;    }    private void addLine(String prefix, String text) {        int tick = client.getTickCount();        SwingUtilities.invokeLater(() -> {            if (tick != lastTick) {                lastTick = tick;                JLabel header = new JLabel("Tick " + tick);                header.setFont(FontManager.getRunescapeSmallFont());                header.setBorder(new CompoundBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, ColorScheme.LIGHT_GRAY_COLOR),                        BorderFactory.createEmptyBorder(3, 6, 0, 0)));                tracker.add(header);            }            JPanel labelPanel = new JPanel();            labelPanel.setLayout(new BorderLayout());            JTextField prefixLabel = new JTextField(prefix);            prefixLabel.setEditable(false);            prefixLabel.setBackground(null);            prefixLabel.setBorder(null);            prefixLabel.setToolTipText(prefix);            JTextField textLabel = new JTextField(text);            textLabel.setEditable(false);            textLabel.setBackground(null);            textLabel.setBorder(null);            prefixLabel.setPreferredSize(new Dimension(400, 14));            prefixLabel.setMaximumSize(new Dimension(400, 14));            labelPanel.add(prefixLabel, BorderLayout.WEST);            labelPanel.add(textLabel);            tracker.add(labelPanel);            // Cull very old stuff            while (tracker.getComponentCount() > MAX_LOG_ENTRIES) {                tracker.remove(0);            }            tracker.revalidate();        });    }    @Subscribe    public void onProjectileMoved(ProjectileMoved event) {        if (!projectiles.isSelected()) return;        projectileTracker.submitProjectileMoved(client, event, (earlyProjectileInfo, dynamicProjectileInfo, prefix, text) -> addLine(prefix, text));    }    @Subscribe    public void spotanimChanged(GraphicChanged event) {        if (!spotanims.isSelected()) return;        Actor actor = event.getActor();        if (actor == null) return;        String actorLabel = formatActor(actor);        StringBuilder graphicsLabelBuilder = new StringBuilder();        graphicsLabelBuilder.append("Graphics(");        graphicsLabelBuilder.append("id = ").append(actor.getGraphic() == 65535 ? -1 : actor.getGraphic());        final int delay = actor.getGraphicStartCycle() - client.getGameCycle();        if (delay != 0) graphicsLabelBuilder.append(", delay = ").append(delay);        if (actor.getGraphicHeight() != 0) graphicsLabelBuilder.append(", height = ").append(actor.getGraphicHeight());        graphicsLabelBuilder.append(")");        addLine(actorLabel, graphicsLabelBuilder.toString());    }    /**     * Npc sequence changes need to be tracked through this method which is almost perfect, but there are     * edge cases where if the animation matches the already-playing animation, the field hook may not get invoked.     * For players, as the mask calls another function, we run this through another, always-executed function.     */    @Subscribe    public void npcSequenceChanged(AnimationFrameIndexChanged event) {        if (!sequences.isSelected()) return;        Actor actor = event.getActor();        if (actor == null || actor instanceof Player || actor.getAnimationFrameIndex() != 0 || actor.getName() == null || isActorPositionUninitialized(actor)) return;        postSequenceUpdate(actor, actor.getAnimation() == 65535 ? -1 : actor.getAnimation(), actor.getAnimationDelay());    }    @Subscribe    public void playerSequenceChanged(PlayerAnimationPlayed event) {        if (!sequences.isSelected()) return;        Actor actor = event.getPlayer();        if (actor == null || actor.getName() == null || isActorPositionUninitialized(actor)) return;        postSequenceUpdate(event.getPlayer(), event.getId(), event.getDelay());    }    private void postSequenceUpdate(Actor actor, int id, int delay) {        String actorLabel = formatActor(actor);        StringBuilder animationLabelBuilder = new StringBuilder();        animationLabelBuilder.append("Animation(");        animationLabelBuilder.append("id = ").append(id);        if (delay != 0) animationLabelBuilder.append(", delay = ").append(delay);        animationLabelBuilder.append(")");        addLine(actorLabel, animationLabelBuilder.toString());    }    @Subscribe    public void hintArrowChanged(HintArrowEvent event) {        if (!hintArrows.isSelected()) return;        final int type = client.getHintArrowTargetType();        switch (type) {            /* Type 1 is for npc hint arrows */            case 1:                final NPC npc = client.getHintArrowNpc();                addLine(npc == null ? "Out of boundaries hint arrow" : formatActor(npc),                        "HintArrow(type = Npc, index = " + client.getHintArrowNpcTargetIdx() + ")");                break;            /* Type 1 is for player hint arrows */            case 10:                final Player player = client.getHintArrowPlayer();                addLine(player == null ? "Out of boundaries hint arrow" : formatActor(player),                        "HintArrow(type = Player, index = " + client.getHintArrowPlayerTargetIdx() + ")");                break;            default:                final LocalPoint localPoint = LocalPoint.fromScene(event.getHintArrowX(), event.getHintArrowY());                final WorldPoint worldPoint = WorldPoint.fromLocal(client, localPoint);                addLine("Hint arrow" + type, "HintArrow(type = " + type                        + ", location = Location(x = " + worldPoint.getX() + ", y = " + worldPoint.getY() + ", z = " + worldPoint.getPlane() + "))");                break;        }    }    @Subscribe    public void cameraResetEvent(CameraResetEvent event) {        if (!camera.isSelected()) return;        /* Since only the packet resets camera shaking, and because it is done in a loop, only accept the first one. */        if (event.getId() != 0) return;        addLine("Camera reset", "CamReset");    }    @Subscribe    public void cameraShakeEvent(CameraShakeEvent event) {        if (!camera.isSelected()) return;        addLine("Camera shake", "CamShake(type = " + event.getType()                + ", shakeIntensity = " + event.getShakeIntensity()                + ", movementIntensity = " + event.getMovementIntensity()                + ", speed = " + event.getSpeed() + ")");    }    @Subscribe    public void cameraLookAtEvent(CameraLookAtEvent event) {        if (!camera.isSelected()) return;        final LocalPoint localPoint = LocalPoint.fromScene(event.getCameraLookAtX(), event.getCameraLookAtY());        final WorldPoint worldPoint = WorldPoint.fromLocal(client, localPoint);        addLine("Camera look at", "CamLookAt(location = Location("        + "x = " + worldPoint.getX() + ", y = " + worldPoint.getY() + ", z = " + worldPoint.getPlane() + "), "        + "height = " + event.getCameraLookAtHeight() + ", speed = " + event.getCameraLookAtSpeed() + ", "        + "acceleration = " + event.getCameraLookAtAcceleration() + ")");    }    @Subscribe    public void cameraMoveToEvent(CameraMoveToEvent event) {        if (!camera.isSelected()) return;        final LocalPoint localPoint = LocalPoint.fromScene(event.getCameraMoveToX(), event.getCameraMoveToY());        final WorldPoint worldPoint = WorldPoint.fromLocal(client, localPoint);        addLine("Camera move to", "CamMoveTo(location = Location("                + "x = " + worldPoint.getX() + ", y = " + worldPoint.getY() + ", z = " + worldPoint.getPlane() + "), "                + "height = " + event.getCameraMoveToHeight() + ", speed = " + event.getCameraMoveToSpeed() + ", "                + "acceleration = " + event.getCameraMoveToAcceleration() + ")");    }    @Subscribe    public void minimapStateEvent(MinimapStateChange event) {        if (!minimapState.isSelected()) return;        final MinimapState state = MinimapState.getState(event.getState());        addLine("Minimap status change", "MinimapToggle(state = " + (state == null ? event.getState() : state) + ")");    }    @Subscribe    public void soundEffectPlayed(SoundEffectPlayed event) {        if (!soundEffects.isSelected()) return;        final int soundId = event.getSoundId();        final int delay = event.getDelay();        final int loops = event.getLoops();        StringBuilder soundEffectBuilder = new StringBuilder();        soundEffectBuilder.append("SoundEffect(");        soundEffectBuilder.append("id = ").append(soundId);        if (delay != 0) soundEffectBuilder.append(", delay = ").append(delay);        if (loops != 1) soundEffectBuilder.append(", repetitions = ").append(loops);        soundEffectBuilder.append(")");        addLine("Local", soundEffectBuilder.toString());    }    @Subscribe    public void areaSoundEffectPlayed(AreaSoundEffectPlayed event) {        if (!areaSoundEffects.isSelected()) return;        /* Animation-driven sounds will always have the source set to non-null, however that information is useless to us so skip it. */        if (event.getSource() != null) return;        final int soundId = event.getSoundId();        final int delay = event.getDelay();        final int loops = event.getLoops();        final int radius = event.getRange();        StringBuilder soundEffectBuilder = new StringBuilder();        soundEffectBuilder.append("SoundEffect(");        soundEffectBuilder.append("id = ").append(soundId);        if (radius != 0) soundEffectBuilder.append(", radius = ").append(radius);        if (delay != 0) soundEffectBuilder.append(", delay = ").append(delay);        if (loops != 1) soundEffectBuilder.append(", repetitions = ").append(loops);        soundEffectBuilder.append(")");        WorldPoint location = WorldPoint.fromLocal(client, LocalPoint.fromScene(event.getSceneX(), event.getSceneY()));        Optional<Player> sourcePlayer = client.getPlayers().stream().filter(player -> player.getWorldLocation().distanceTo(location) == 0).findAny();        Optional<NPC> sourceNpc = client.getNpcs().stream().filter(npc -> npc.getWorldLocation().distanceTo(location) == 0).findAny();        if (sourcePlayer.isPresent() && sourceNpc.isEmpty()) {            addLine(formatActor(sourcePlayer.get()), soundEffectBuilder.toString());        } else if (sourceNpc.isPresent() && sourcePlayer.isEmpty()) {            addLine(formatActor(sourceNpc.get()), soundEffectBuilder.toString());        } else {            addLine("Unknown(" + "x: " + location.getX() + ", y: " + location.getY() + ")", soundEffectBuilder.toString());        }    }    @Subscribe    public void overheadTextChanged(OverheadTextChanged event) {        if (!say.isSelected()) return;        Actor actor = event.getActor();        if (actor == null) return;        overheadChatList.add(event);    }    /**     * Due to the annoying nature of how overhead chat is handled by the client, the only way we can detect if a message was actually server-driven     * or player-driven is to see if another field was changed shortly after. This strictly applies for player public chat, therefore it     * works great as a means to detect overhead chat messages.     */    @Subscribe    public void showPublicPlayerChatChanged(ShowPublicPlayerChatChanged event) {        if (!overheadChatList.isEmpty()) {            OverheadTextChanged element = overheadChatList.get(overheadChatList.size() - 1);            overheadChatList.remove(element);        }    }    @Subscribe    public void experienceChanged(StatChanged event) {        if (!experience.isSelected()) return;        final int previousExperience = cachedExperienceMap.getOrDefault(event.getSkill(), -1);        cachedExperienceMap.put(event.getSkill(), event.getXp());        if (previousExperience == -1) return;        final int experienceDiff = event.getXp() - previousExperience;        if (experienceDiff == 0) return;        addLine("Local", "Experience(skill = " + event.getSkill().getName() + ", xp = " + experienceDiff + ")");    }    @Subscribe    public void chatMessage(ChatMessage event) {        if (!messages.isSelected()) return;        ChatMessageType type = event.getType();        String name = event.getName();        if (name != null && !name.isEmpty()) {            return;        }        addLine("Local", "Message(type = " + type + ", text = \"" + event.getMessage() + "\")");    }    @SuppressWarnings("StringBufferReplaceableByString")    @Subscribe    public void onClientTick(ClientTick event) {        latestInventoryId = -1;        /* Reset animation access as it may not have been reset manually due to a null check in the function. */        accessedObjectForAnimation = false;        if (!facedActors.isEmpty()) facedActors.clear();        if (!facedDirectionActors.isEmpty()) {            facedDirectionActors.forEach((faceDirectionActor, value) -> {                if (faceDirectionActor == null || isActorPositionUninitialized(faceDirectionActor)) return;                addLine(formatActor(faceDirectionActor), "FaceCoordinate(direction = " + value + ")");            });            facedDirectionActors.clear();        }        if (!overheadChatList.isEmpty()) {            for (OverheadTextChanged message : overheadChatList) {                String text = message.getOverheadText();                addLine(formatActor(message.getActor()), "Say(text = \"" + text + "\")");            }            overheadChatList.clear();        }        if (!updatedIfEvents.isEmpty()) {            updatedIfEvents.forEach((packedKey, slots) -> {                final int events = packedKey.intValue();                final int interfaceId = (int) ((packedKey >> 48) & 0xFFFF);                final int componentId = (int) ((packedKey >> 32) & 0xFFFF);                for (Pair<Integer, Integer> range : getSlotRanges(new ArrayList<>(slots))) {                    final StringBuilder eventBuilder = new StringBuilder();                    eventBuilder.append("IfSetEvents(");                    eventBuilder.append("interfaceId = ").append(interfaceId).append(", ");                    eventBuilder.append("componentId = ").append(componentId).append(", ");                    eventBuilder.append("startIndex = ").append(range.getLeft()).append(", ");                    eventBuilder.append("endIndex = ").append(range.getRight()).append(", ");                    eventBuilder.append("events = ").append(InterfaceEvent.sanitize(events)).append(")");                    addLine("Interface event", eventBuilder.toString());                }            });            updatedIfEvents.clear();        }        if (!pendingSpawnList.isEmpty()) {            for (PendingSpawnUpdated update : pendingSpawnList) {                final LocalPoint localPoint = LocalPoint.fromScene(update.getX(), update.getY());                final WorldPoint location = WorldPoint.fromLocal(client, localPoint);                /* Object id -1 implies an object removal. */                if (update.getId() == -1) {                    if (mapObjectDel.isSelected()) {                        final StringBuilder locDelBuilder = new StringBuilder();                        locDelBuilder.append("LocDel(");                        locDelBuilder.append("slot = ").append(update.getType()).append(", ");                        locDelBuilder.append("rotation = ").append(update.getOrientation()).append(", ");                        locDelBuilder.append("location = Location(");                        locDelBuilder.append("x = ").append(location.getX()).append(", ");                        locDelBuilder.append("y = ").append(location.getY()).append(", ");                        locDelBuilder.append("z = ").append(location.getPlane()).append("))");                        addLine("Delete map object", locDelBuilder.toString());                    }                } else if (mapObjectAdd.isSelected()) {                    final StringBuilder locAddBuilder = new StringBuilder();                    locAddBuilder.append("LocAdd(");                    locAddBuilder.append("id = ").append(update.getId()).append(", ");                    locAddBuilder.append("slot = ").append(update.getType()).append(", ");                    locAddBuilder.append("rotation = ").append(update.getOrientation()).append(", ");                    locAddBuilder.append("location = Location(");                    locAddBuilder.append("x = ").append(location.getX()).append(", ");                    locAddBuilder.append("y = ").append(location.getY()).append(", ");                    locAddBuilder.append("z = ").append(location.getPlane()).append("))");                    addLine("Add map object", locAddBuilder.toString());                }            }            pendingSpawnList.clear();        }        if (!ifMoveSubs.isEmpty()) {            if (ifMoveSub.isSelected()) {                ifMoveSubs.forEach((node, value) -> {                    final long fromTopInterfacePacked = value.getLeft();                    final long packedInterface = value.getRight();                    addLine("Move interface (id = " + node.getId() + ", walkType = " + node.getModalMode() + ")",                            "IfMoveSub("                                    + "fromTopInterface = " + (fromTopInterfacePacked >> 16) + ", " + "fromTopComponent = " + (fromTopInterfacePacked & 0xFFFF)                                    + ", " + "toTopInterface = " + (packedInterface >> 16) + ", " + "toTopComponent = " + (packedInterface & 0xFFFF) + ")");                });            }            ifMoveSubs.clear();        }    }    @Subscribe    public void onHashTableNodePut(HashTableNodePut event) {        HashTable<? extends Node> table = event.getHashTable();        if (table == client.getWidgetFlags()) {            if (!ifEvents.isSelected()) return;            if (!(event.getNode() instanceof IntegerNode)) return;            final int events = ((IntegerNode) event.getNode()).getValue();            final long value = event.getValue();            final int packedIf = (int) (value >> 32L);            final int slot = (int) value;            final long mapKey = (long) events | ((long) packedIf << 32);            final Set<Integer> slots = updatedIfEvents.computeIfAbsent(mapKey, k -> new HashSet<>());            slots.add(slot);        } else if (table == client.getComponentTable()) {            // TODO: Used to track ifmovesub            if (!(event.getNode() instanceof WidgetNode)) return;            final WidgetNode node = ((WidgetNode) event.getNode());            final long value = event.getValue();            ifMoveSubs.put(node, Pair.of(hashTableNodeGet1, value));            lastMoveSub = node;            resetTrackedVariables();        }    }    @Subscribe    public void onHashTableNodeGet(HashTableNodeGetCall event) {        hashTableNodeGet1 = hashTableNodeGet2;        hashTableNodeGet2 = event.getKey();    }    @Subscribe    public void onIfOpenTopReceived(IfOpenTopEvent event) {        resetTrackedVariables();        if (event.getRootInterface() == -1 || !ifOpenTop.isSelected()) return;        addLine("Top interface", "IfOpenTop(id = " + event.getRootInterface() + ")");    }    @Subscribe    public void onIfOpenSubReceiver(IfOpenSubEvent event) {        resetTrackedVariables();        /* Because open sub and move sub are quite similar in nature, we have to keep track of its state to filter out moves. */        if (lastMoveSub != null) {            ifMoveSubs.remove(lastMoveSub);            lastMoveSub = null;        }        if (!ifOpenSub.isSelected()) return;        addLine("Sub interface", "IfOpenSub(id = " + event.getInterfaceId()                + ", topInterface = " + (event.getTargetComponent() >> 16)                + ", topComponent = " + (event.getTargetComponent() & 0xFFFF)                + ", walkType = " + event.getWalkType() + ")");    }    @Subscribe    public void onWidgetCloseReceived(WidgetClosed event) {        resetTrackedVariables();        if (!ifCloseSub.isSelected() || !event.isUnload()) return;        addLine("Close Sub Interface(id = " + event.getGroupId() + ", walkType = " + event.getModalMode() + ")",                "IfCloseSub(topInterface = " + (hashTableNodeGet2 >> 16) + ", topComponent = " + (hashTableNodeGet2 & 0xFFFF) + ")");    }    private void resetTrackedVariables() {        widgetScrollY = -1;        widgetText = null;        widgetSequence = -1;        widgetColor = -1;        widgetZoom = -1;        widgetAngleX = -1;        widgetAngleY = -1;        widgetPositionX = -1;        widgetPositionY = -1;        widgetModelId = -1;        widgetItemId = -1;        widgetItemQuantityOrModelId = -1;        widgetSetPlayerHead = false;        widgetModelRotation = -1;        widgetHidden = null;        widgetNpcId = -1;    }    @Subscribe    public void onWidgetConstructed(PostWidgetConstructed event) {        resetTrackedVariables();    }    @Subscribe    public void onServerPacketReadStartedEvent(ServerPacketReadStartedEvent event) {        resetTrackedVariables();    }    @Subscribe    public void onServerPacketReadCompleteEvent(ServerPacketReadCompleteEvent event) {        if (!miscInterfacePackets.isSelected()) return;        if (widgetScrollY != -1) {            addLine("Interface Scroll Position", "IfSetScrollPos(" + formatLatestWidgetCall() + ", scrollHeight = " + widgetScrollY + ")");        } else if (widgetText != null) {            addLine("Interface Text", "IfSetText(" + formatLatestWidgetCall() + ", text = \"" + widgetText + "\")");        } else if (widgetSequence != -1) {            addLine("Interface Sequence", "IfSetAnim(" + formatLatestWidgetCall() + ", animationId = " + widgetSequence + ")");        } else if (widgetColor != -1) {            final int red = (widgetColor >> 19) & 0x1F;            final int green = (widgetColor >> 11) & 0x1F;            final int blue = (widgetColor >> 3) & 0x1F;            addLine("Interface Text Colour", "IfSetColor(" + formatLatestWidgetCall() + ", red = " + red + ", green = " + green + ", blue = " + blue + ")");        } else if (widgetZoom != -1 && widgetAngleX != -1 && widgetAngleY != -1) {            addLine("Interface Angle", "IfSetAngle(" + formatLatestWidgetCall()                    + ", zoom = " + widgetZoom + ", angleX = " + widgetAngleX + ", angleY = " + widgetAngleY + ")");        } else if (widgetPositionX != -1 && widgetPositionY != -1) {            addLine("Interface Position", "IfSetPosition(" + formatLatestWidgetCall()                    + ", x = " + widgetPositionX + ", y = " + widgetPositionY + ")");        } else if (widgetModelId != -1) {            addLine("Interface Model", "IfSetModel(" + formatLatestWidgetCall() + ", modelId = " + widgetModelId + ")");        } else if (widgetItemId != -1 && widgetItemQuantityOrModelId != -1) {            if (widgetObjectType) {                addLine("Interface Object",                        "IfSetObject(" + formatLatestWidgetCall() + ", itemId = " + widgetItemId + ", itemQuantity = " + widgetItemQuantityOrModelId + ")");            } else {                addLine("Interface Object",                        "IfSetObject(" + formatLatestWidgetCall() + ", itemId = " + widgetItemId + ", modelZoom = " + widgetItemQuantityOrModelId + ")");            }        } else if (widgetSetPlayerHead) {            addLine("Interface Player Head", "IfSetPlayerHead(" + formatLatestWidgetCall() + ")");        } else if (widgetModelRotation != -1) {            addLine("Interface Model Rotation",                    "IfModelRotate(" + formatLatestWidgetCall() + ", pitch = " + (widgetModelRotation >> 16) + ", roll = " + (widgetModelRotation & 0xFFFF) + ")");        } else if (widgetHidden != null) {            addLine("Interface Visibility", "IfSetHide(" + formatLatestWidgetCall() + ", hidden = " + widgetHidden + ")");        } else if (widgetNpcId != -1) {            addLine("Interface Npc Head", "IfSetNpcHead(" + formatLatestWidgetCall() + ", npcId = " + widgetNpcId + ")");        }    }    private String formatLatestWidgetCall() {        final int latestWidgetCall = client.getLatestWidgetCall();        return "interfaceId = " + (latestWidgetCall >> 16)                + ", componentId = " + (latestWidgetCall & 0xFFFF);    }    @Subscribe    public void onWidgetScrollHeightChanged(WidgetScrollHeightChanged event) {        widgetScrollY = event.getScrollY();    }    @Subscribe    public void onWidgetTextChanged(WidgetTextChanged event) {        widgetText = event.getText();    }    @Subscribe    public void onWidgetSequenceChanged(WidgetSequenceChanged event) {        widgetSequence = event.getAnimationId();    }    @Subscribe    public void onWidgetColorChanged(WidgetColorChanged event) {        widgetColor = event.getColor();    }    @Subscribe    public void onWidgetZoomChanged(WidgetZoomChanged event) {        widgetZoom = event.getZoom();        widgetAngleX = event.getAngleX();        widgetAngleY = event.getAngleY();    }    @Subscribe    public void onWidgetPositionChanged(WidgetPositionChanged event) {        widgetPositionX = event.getX();        widgetPositionY = event.getY();    }    @Subscribe    public void onWidgetModelChanged(WidgetModelChanged event) {        widgetModelId = event.getModelId();    }    @Subscribe    public void onWidgetObjectChanged(WidgetSetObject event) {        widgetItemId = event.getItemId();        widgetItemQuantityOrModelId = event.getItemQuantityOrModelZoom();        widgetObjectType = event.isNewType();    }    @Subscribe    public void onWidgetSetPlayerHead(WidgetSetPlayerHead event) {        widgetSetPlayerHead = true;    }    @Subscribe    public void onWidgetModelRotation(WidgetModelRotate event) {        widgetModelRotation = event.getRotation();    }    @Subscribe    public void onWidgetVisibilityChange(WidgetVisibilityChange event) {        widgetHidden = event.isHidden();    }    @Subscribe    public void onWidgetNpcHeadChange(WidgetSetNpcHead event) {        widgetNpcId = event.getNpcId();    }    // TODO    @Subscribe    public void onVarbitChanged(VarbitChanged varbitChanged) {        int index = varbitChanged.getIndex();        int[] varps = client.getVarps();        boolean isVarbit = false;        for (int i : varbits.get(index)) {            int old = client.getVarbitValue(oldVarps, i);            int newValue = client.getVarbitValue(varps, i);            String name = null;            for (Varbits varbit : Varbits.values()) {                if (varbit.getId() == i) {                    name = varbit.name();                    break;                }            }            if (old != newValue) {                client.setVarbitValue(oldVarps2, i, newValue);                if (varbitsCheckBox.isSelected()) {                    String prefix = name == null ? "Varbit" : ("Varbit \"" + name + "\"");                    addLine(prefix + " (varpId: " + index + ", oldValue: " + old + ")", "Varbit(id = " + i + ", value = " + newValue + ")");                }                isVarbit = true;            }        }        if (isVarbit || !varpsCheckBox.isSelected()) return;        int old = oldVarps2[index];        int newValue = varps[index];        if (old != newValue) {            String name = null;            for (VarPlayer varp : VarPlayer.values()) {                if (varp.getId() == index) {                    name = varp.name();                    break;                }            }            String prefix = name == null ? "Varp" : ("Varp \"" + name + "\"");            addLine(prefix + " (oldValue: " + old + ")", "Varp(id = " + index + ", value = " + newValue + ")");        }        System.arraycopy(client.getVarps(), 0, oldVarps, 0, oldVarps.length);        System.arraycopy(client.getVarps(), 0, oldVarps2, 0, oldVarps2.length);    }    @Subscribe    public void onHitsplatApplied(HitsplatApplied event) {        if (!hitsCheckBox.isSelected()) return;        Actor actor = event.getActor();        if (actor == null || isActorPositionUninitialized(actor)) return;        Hitsplat hitsplat = event.getHitsplat();        addLine(formatActor(actor), "Hit(type = " + hitsplat.getHitsplatType() + ", amount = " + hitsplat.getAmount() + ")");    }    @Subscribe    public void onInteractingChanged(InteractingChanged event) {        if (!interacting.isSelected()) return;        Actor sourceActor = event.getSource();        if (!facedActors.add(sourceActor)) return;        Actor targetActor = event.getTarget();        if (sourceActor == null || isActorPositionUninitialized(sourceActor)) return;        addLine(formatActor(sourceActor), "FaceEntity(" + (targetActor == null ? "null" : formatActor(targetActor)) + ")");    }    @Subscribe    public void onFacedDirectionChanged(FacedDirectionChanged event) {        if (!tileFacing.isSelected() || event.getDirection() == -1) return;        Actor sourceActor = event.getSource();        if (!facedDirectionActors.containsKey(sourceActor)) facedDirectionActors.put(sourceActor, event.getDirection());    }    @Subscribe    public void onScriptPreFired(ScriptPreFired event) {        resetTrackedVariables();        if (!clientScripts.isSelected()) return;        ScriptEvent scriptEvent = event.getScriptEvent();        /* Filter out the non-server created scripts. Do note that other plugins may call CS2s, such as the quest helper plugin. */        if (scriptEvent == null || scriptEvent.getSource() != null || scriptEvent.type() != 76) return;        final Object[] arguments = scriptEvent.getArguments();        final int scriptId = Integer.parseInt(arguments[0].toString());        if (ignoredClientScripts.contains(scriptId)) return;        final StringBuilder args = new StringBuilder();        for (int i = 1; i < arguments.length; i++) {            final Object argument = arguments[i];            if (argument instanceof String) {                args.append('"').append(argument).append('"');            } else {                args.append(arguments[i]);            }            if (i < arguments.length - 1) args.append(", ");        }        addLine("Local", "ClientScript(id = " + scriptId + ", arguments = [" + args + "])");    }    @Subscribe    public void onScriptPostFired(ScriptPostFired event) {        resetTrackedVariables();    }    @Subscribe    public void onScriptCallback(ScriptCallbackEvent event) {        resetTrackedVariables();    }    @Subscribe    public void onGroundItemSpawned(ItemSpawned event) {        if (!groundItemAdd.isSelected()) return;        final Tile tile = event.getTile();        final TileItem item = event.getItem();        final WorldPoint location = tile.getWorldLocation();        final StringBuilder builder = new StringBuilder();        builder.append("ObjAdd(item = Item(");        builder.append("id = ").append(item.getId());        if (item.getQuantity() != 1) builder.append(", quantity = ").append(item.getQuantity());        builder.append("), location = Location(");        builder.append("x = ").append(location.getX()).append(", ");        builder.append("y = ").append(location.getY()).append(", ");        builder.append("z = ").append(location.getPlane()).append("))");        addLine("Ground item add", builder.toString());    }    @Subscribe    public void onGroundItemDespawned(ItemDespawned event) {        if (!groundItemDel.isSelected()) return;        final Tile tile = event.getTile();        final TileItem item = event.getItem();        final WorldPoint location = tile.getWorldLocation();        final StringBuilder builder = new StringBuilder();        builder.append("ObjDel(item = Item(");        builder.append("id = ").append(item.getId());        if (item.getQuantity() != 1) builder.append(", quantity = ").append(item.getQuantity());        builder.append("), location = Location(");        builder.append("x = ").append(location.getX()).append(", ");        builder.append("y = ").append(location.getY()).append(", ");        builder.append("z = ").append(location.getPlane()).append("))");        addLine("Ground item delete", builder.toString());    }    @Subscribe    public void onGroundItemQuantityChange(ItemQuantityChanged event) {        if (!groundItemUpdate.isSelected()) return;        final Tile tile = event.getTile();        final TileItem item = event.getItem();        final WorldPoint location = tile.getWorldLocation();        final StringBuilder builder = new StringBuilder();        builder.append("ObjUpdate(");        builder.append("updatedQuantity = ").append(event.getNewQuantity()).append(", ");        builder.append("item = Item(");        builder.append("id = ").append(item.getId());        if (item.getQuantity() != 1) builder.append(", quantity = ").append(event.getOldQuantity());        builder.append("), location = Location(");        builder.append("x = ").append(location.getX()).append(", ");        builder.append("y = ").append(location.getY()).append(", ");        builder.append("z = ").append(location.getPlane()).append("))");        addLine("Ground item quantity update", builder.toString());    }    @Subscribe    public void onGetDynamicObjectForAnimationEvent(GetDynamicObjectForAnimationEvent event) {        accessedObjectForAnimation = true;    }    @Subscribe    public void onDynamicObjectAnimationChanged(DynamicObjectAnimationChanged event) {        if (!mapObjectAnim.isSelected() || !accessedObjectForAnimation) return;        accessedObjectForAnimation = false;        final int id = event.getObject();        Scene scene = client.getScene();        Tile[][][] tiles = scene.getTiles();        Tile localTile = tiles[client.getPlane()][event.getX()][event.getY()];        if (localTile == null) return;        if (submitObjectAnimationIfMatches(localTile.getWallObject(), event, id)) return;        if (submitObjectAnimationIfMatches(localTile.getDecorativeObject(), event, id)) return;        if (submitObjectAnimationIfMatches(localTile.getGroundObject(), event, id)) return;        Optional<GameObject> gameObject =                Arrays.stream(localTile.getGameObjects()).filter(obj -> obj != null && (obj.getHash() >>> 17 & 4294967295L) == event.getObject()).findAny();        gameObject.ifPresent(object -> submitObjectAnimation(event, object));    }    private boolean submitObjectAnimationIfMatches(TileObject object, DynamicObjectAnimationChanged event, int id) {        if (object == null) return false;        if ((object.getHash() >>> 17 & 4294967295L) == id) {            submitObjectAnimation(event, object);            return true;        }        return false;    }    private void submitObjectAnimation(DynamicObjectAnimationChanged event, TileObject object) {        final int modelRotation = object.getModelOrientation();        final int type = object.getFlags() & 0x1F;        int rotation = modelRotation;        if (type == 2 || type == 6 || type == 8) {            rotation -= 4;        } else if (type == 7) {            rotation = (rotation - 2 & 0x3);        }        final LocalPoint localPoint = LocalPoint.fromScene(event.getX(), event.getY());        final WorldPoint location = WorldPoint.fromLocal(client, localPoint);        addLine("Map Object Animation", "LocAnim(animation = " + event.getAnimation()                + ", object = MapObject(id = " + object.getId() + ", type = " + type +                ", rotation = " + rotation + ", x = " + location.getX() + ", y = " + location.getY() + ", z = " + location.getPlane() + "))");    }    @Subscribe    public void onGraphicsObjectCreated(GraphicsObjectCreated event) {        if (!graphicsObjectChanges.isSelected()) return;        final GraphicsObject obj = event.getGraphicsObject();        final WorldPoint location = WorldPoint.fromLocal(client, obj.getLocation());        final int delay = obj.getStartCycle() - client.getGameCycle();        final int tileHeight = Perspective.getTileHeight(client, obj.getLocation(), client.getPlane());        final StringBuilder builder = new StringBuilder();        final int height = -(obj.getHeight() - tileHeight);        builder.append("SpotanimSpecific(");        builder.append("id = ").append(obj.getId()).append(", ");        if (delay != 0) builder.append("delay = ").append(delay).append(", ");        if (height != 0) builder.append("height = ").append(height).append(", ");        builder.append("location = Location(");        builder.append("x = ").append(location.getX()).append(", ");        builder.append("y = ").append(location.getY()).append(", ");        builder.append("z = ").append(location.getPlane()).append("))");        addLine("Spotanim Specific", builder.toString());    }    @Subscribe    public void onJinglePlayed(JinglePlayed event) {        if (!jingles.isSelected()) return;        addLine("Jingle", "Jingle(id = " + event.getJingleId() + ")");    }    @Subscribe    public void onExactMoveReceived(ExactMoveEvent event) {        if (!exactMove.isSelected()) return;        final Actor actor = event.getActor();        if (actor == null || isActorPositionUninitialized(actor)) return;        final int currentCycle = client.getGameCycle();        final StringBuilder exactMoveBuilder = new StringBuilder();        final WorldPoint actorWorldLocation = actor.getWorldLocation();        exactMoveBuilder.append("ExactMove(");        exactMoveBuilder.append("startLocation = Location(");        exactMoveBuilder.append(actorWorldLocation.getX() - event.getExactMoveDeltaX2()).append(", ");        exactMoveBuilder.append(actorWorldLocation.getY() - event.getExactMoveDeltaY2()).append(", ");        exactMoveBuilder.append(client.getPlane()).append("), ");        exactMoveBuilder.append("startDelay = ").append(event.getExactMoveArrive1Cycle() - currentCycle).append(", ");        exactMoveBuilder.append("endLocation = Location(");        exactMoveBuilder.append(actorWorldLocation.getX() - event.getExactMoveDeltaX1()).append(", ");        exactMoveBuilder.append(actorWorldLocation.getY() - event.getExactMoveDeltaY1()).append(", ");        exactMoveBuilder.append(client.getPlane()).append("), ");        exactMoveBuilder.append("endDelay = ").append(event.getExactMoveArrive2Cycle() - currentCycle).append(", ");        exactMoveBuilder.append("direction = ").append(event.getExactMoveDirection()).append(")");        addLine(formatActor(actor), exactMoveBuilder.toString());    }    @Subscribe    public void onNpcChanged(NpcChanged event) {        if (!transformations.isSelected()) return;        final NPC npc = event.getNpc();        final NPCComposition oldComposition = event.getOld();        final WorldPoint actorWorldLocation = npc.getWorldLocation();        final String coordinateString = "x: " + actorWorldLocation.getX() + ", y: " + actorWorldLocation.getY();        final String actorName = "Npc(" + npc.getName() + ", idx: " + npc.getIndex() + ", id: " + oldComposition.getId() + ", " + coordinateString + ")";        addLine(actorName, "Transformation(" + npc.getComposition().getId() + ")");    }    @Subscribe    public void onPlayerChanged(PlayerChanged event) {        if (!transformations.isSelected()) return;        final Player player = event.getPlayer();        final PlayerComposition composition = player.getPlayerComposition();        final int transformedToNpc = composition == null ? -1 : composition.getTransformedNpcId();        final int sanitizedTransformedId = transformedToNpc == 65535 ? -1 : transformedToNpc;        final int latestNpcId = playerTransformations.getOrDefault(player, -1);        /* If the cached value matches the "new" version, transformation did not occur. */        if (latestNpcId == sanitizedTransformedId) {            return;        }        playerTransformations.put(player, sanitizedTransformedId);        addLine(formatActor(player), "Transformation(" + sanitizedTransformedId + ")");    }    @Subscribe    public void onContainerItemChanged(ContainerItemChange event) {        if (!inventoryChanges.isSelected()) return;        if (latestInventoryId != event.getInventoryId()) {            final int latestWidgetCall = client.getLatestWidgetCall();            addLine("Inventory update", "InvComponent(interfaceId = " + (latestWidgetCall >> 16) + ", componentId = " + (latestWidgetCall & 0xFFFF) + ")");            latestInventoryId = event.getInventoryId();        }        addLine("Inventory change",                "Inv(inventoryId = " + event.getInventoryId() + ", "                    + "slotId = " + event.getSlotId() + ", "                    + "itemId = " + event.getItemId() + ", "                    + "amount = " + event.getQuantity() + ")");    }    @Subscribe    public void onPendingSpawnUpdated(PendingSpawnUpdated event) {        /* To get the model clip packet to function, we need to combine multiple plugins into what is essentially a state machine. */        pendingSpawnList.add(event);    }    @SuppressWarnings("StringBufferReplaceableByString")    @Subscribe    public void onAttachedModelReceived(AttachedModelEvent event) {        /* Always remove the combined objects to ensure valid object add/remove detection. */        final PendingSpawnUpdated latestPendingSpawn = pendingSpawnList.isEmpty() ? null : pendingSpawnList.remove(pendingSpawnList.size() - 1);        if (!combinedObjects.isSelected()) return;        if (latestPendingSpawn == null) {            log.info("Latest pending spawn is null!");            return;        }        Scene scene = client.getScene();        Tile[][][] tiles = scene.getTiles();        Tile localTile = tiles[client.getPlane()][latestPendingSpawn.getX()][latestPendingSpawn.getY()];        /* Let's assume that any object that uses this packet is a main game object. Decorations and other objects can rarely ever be clicked, let alone this. */        Optional<GameObject> attachedObject = Arrays.stream(localTile.getGameObjects()).filter(obj -> {            if (obj == null) return false;            final int rotation = obj.getOrientation().getAngle() >> 9;            final int type = obj.getFlags() & 0x1F;            return event.getAttachedModel() == getModel(obj, type, rotation, latestPendingSpawn.getX(), latestPendingSpawn.getY());        }).findAny();        if (attachedObject.isEmpty()) {            log.info("Unable to find a matching game object for object combine.");            return;        }        GameObject obj = attachedObject.get();        WorldPoint objectLocation = obj.getWorldLocation();        final int clientTime = client.getGameCycle();        final int rotation = obj.getOrientation().getAngle() >> 9;        final int type = obj.getFlags() & 0x1F;        final int minX = event.getMinX() - latestPendingSpawn.getX();        final int minY = event.getMinY() - latestPendingSpawn.getY();        final int maxX = event.getMaxX() - latestPendingSpawn.getX();        final int maxY = event.getMaxY() - latestPendingSpawn.getY();        final int startTime = event.getAnimationCycleStart() - clientTime;        final int endTime = event.getAnimationCycleEnd() - clientTime;        final StringBuilder attachedObjectBuilder = new StringBuilder();        attachedObjectBuilder.append("AttachedObject(");        attachedObjectBuilder.append("mapObject = MapObject(").append(obj.getId()).append(", ").append(type).append(", ").append(rotation).append(", ");        attachedObjectBuilder.append(objectLocation.getX()).append(", ").append(objectLocation.getY()).append(", ")                .append(objectLocation.getPlane()).append("), ");        attachedObjectBuilder.append("startTime = ").append(startTime).append(", ");        attachedObjectBuilder.append("endTime = ").append(endTime).append(", ");        attachedObjectBuilder.append("minX = ").append(minX).append(", ");        attachedObjectBuilder.append("maxX = ").append(maxX).append(", ");        attachedObjectBuilder.append("minY = ").append(minY).append(", ");        attachedObjectBuilder.append("maxY = ").append(maxY).append(")");        addLine(formatActor(event.getPlayer()), attachedObjectBuilder.toString());    }    private Model getModel(final GameObject obj, final int type, final int rotation, final int x, final int y) {        ObjectComposition def = client.getObjectDefinition(obj.getId());        int width;        int length;        if (rotation == 1 || rotation == 3) {            width = def.getSizeY();            length = def.getSizeX();        } else {            width = def.getSizeX();            length = def.getSizeY();        }        int x1 = x + (width >> 1);        int x2 = x + (width + 1 >> 1);        int y1 = y + (length >> 1);        int y2 = y + (length + 1 >> 1);        int[][] heights = client.getTileHeights()[obj.getPlane()];        int averageHeight = heights[x2][y2] + heights[x1][y2] + heights[x2][y1] + heights[x1][y1] >> 2;        int preciseX = (x << 7) + (width << 6);        int preciseY = (y << 7) + (length << 6);        return def.getModel(type, rotation, heights, preciseX, averageHeight, preciseY);    }    /**     * Transforms a list of slots into a list of slot ranges.     * A list of [1, 2, 3, 8, 9, 11] would get transformed to [(1, 3), (8, 9), (11, 11)].     */    private List<Pair<Integer, Integer>> getSlotRanges(List<Integer> slots) {        final List<Pair<Integer, Integer>> slotRanges = new ArrayList<>();        int start = -1;        int last = -1;        Collections.sort(slots);        for (int slot : slots) {            if (start == -1) {                start = slot;                last = slot;                continue;            }            if (slot == last + 1) {                last++;                continue;            }            slotRanges.add(Pair.of(start, last));            start = -1;            last = -1;        }        if (start != -1) slotRanges.add(Pair.of(start, last));        return slotRanges;    }    /**     * It is possible for some variables to be uninitialized on login, so as an uber cheap fix, let's try-catch validate if the actor is fully initialized.     */    private boolean isActorPositionUninitialized(Actor actor) {        try {            return actor.getWorldLocation() == null;        } catch (NullPointerException ignored) {            return true;        }    }    private String formatActor(@NotNull Actor actor) {        WorldPoint actorWorldLocation = actor.getWorldLocation();        String coordinateString = "x: " + actorWorldLocation.getX() + ", y: " + actorWorldLocation.getY();        if (actor instanceof Player) {            return ("Player(" + (actor.getName() + ", idx: " + ((Player) actor).getPlayerId() + ", " + coordinateString + ")"));        } else if (actor instanceof NPC) {            return ("Npc(" + (actor.getName() + ", idx: " + ((NPC) actor).getIndex() + ", id: " + ((NPC) actor).getComposition().getId() + ", " + coordinateString + ")"));        }        return ("Unknown(" + coordinateString + ")");    }    @Override    public void open() {        eventBus.register(this);        if (oldVarps == null) {            oldVarps = new int[client.getVarps().length];            oldVarps2 = new int[client.getVarps().length];        }        varbits = HashMultimap.create();        clientThread.invoke(() -> {            IndexDataBase indexVarbits = client.getIndexConfig();            final int[] varbitIds = indexVarbits.getFileIds(VARBITS_ARCHIVE_ID);            for (int id : varbitIds) {                VarbitComposition varbit = client.getVarbit(id);                if (varbit != null) {                    varbits.put(varbit.getIndex(), id);                }            }        });        super.open();    }    @Override    public void close() {        super.close();        tracker.removeAll();        eventBus.unregister(this);    }    @AllArgsConstructor    private enum MinimapState {        Enabled(0),        MapUnclickable(1),        HideMap(2),        HideCompass(3),        HideCompassMapUnclickable(4),        Disabled(5);        private final int state;        public static MinimapState getState(int state) {            for (MinimapState minimapState : values()) {                if (minimapState.state == state) return minimapState;            }            return null;        }    }    @SuppressWarnings("PointlessBitwiseExpression")    @AllArgsConstructor    private enum InterfaceEvent {        Continue(1 << 0),        ClickOp1(1 << 1),        ClickOp2(1 << 2),        ClickOp3(1 << 3),        ClickOp4(1 << 4),        ClickOp5(1 << 5),        ClickOp6(1 << 6),        ClickOp7(1 << 7),        ClickOp8(1 << 8),        ClickOp9(1 << 9),        ClickOp10(1 << 10),        UseOnGroundItem(1 << 11),        UseOnNpc(1 << 12),        UseOnObject(1 << 13),        UseOnPlayer(1 << 14),        UseOnInventory(1 << 15),        UseOnComponent(1 << 16),        DragDepth1(1 << 17),        DragDepth2(2 << 17),        DragDepth3(3 << 17),        DragDepth4(4 << 17),        DragDepth5(5 << 17),        DragDepth6(6 << 17),        DragDepth7(7 << 17),        DragTargetable(1 << 20),        ComponentTargetable(1 << 21);        private final int value;        private static String sanitize(final int packedEvents) {            final StringBuilder events = new StringBuilder();            for (InterfaceEvent event : values()) {                if ((packedEvents & event.value) != event.value) continue;                events.append(event).append(", ");            }            if (events.length() >= 2) {                events.delete(events.length() - 2, events.length());            }            return events.toString();        }    }}